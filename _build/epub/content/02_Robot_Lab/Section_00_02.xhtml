<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>3 Branches</title>
    <link rel="stylesheet" href="../../_static/pygments.css" type="text/css" />
    <link rel="stylesheet" href="../../_static/epub.css" type="text/css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  
<style>
/* CSS for nbsphinx extension */

/* remove conflicting styling from Sphinx themes */
div.nbinput.container div.prompt *,
div.nboutput.container div.prompt *,
div.nbinput.container div.input_area pre,
div.nboutput.container div.output_area pre,
div.nbinput.container div.input_area .highlight,
div.nboutput.container div.output_area .highlight {
    border: none;
    padding: 0;
    margin: 0;
    box-shadow: none;
}

div.nbinput.container > div[class*=highlight],
div.nboutput.container > div[class*=highlight] {
    margin: 0;
}

div.nbinput.container div.prompt *,
div.nboutput.container div.prompt * {
    background: none;
}

div.nboutput.container div.output_area .highlight,
div.nboutput.container div.output_area pre {
    background: unset;
}

div.nboutput.container div.output_area div.highlight {
    color: unset;  /* override Pygments text color */
}

/* avoid gaps between output lines */
div.nboutput.container div[class*=highlight] pre {
    line-height: normal;
}

/* input/output containers */
div.nbinput.container,
div.nboutput.container {
    display: -webkit-flex;
    display: flex;
    align-items: flex-start;
    margin: 0;
    width: 100%;
}
@media (max-width: 540px) {
    div.nbinput.container,
    div.nboutput.container {
        flex-direction: column;
    }
}

/* input container */
div.nbinput.container {
    padding-top: 5px;
}

/* last container */
div.nblast.container {
    padding-bottom: 5px;
}

/* input prompt */
div.nbinput.container div.prompt pre {
    color: #307FC1;
}

/* output prompt */
div.nboutput.container div.prompt pre {
    color: #BF5B3D;
}

/* all prompts */
div.nbinput.container div.prompt,
div.nboutput.container div.prompt {
    width: 4.5ex;
    padding-top: 5px;
    position: relative;
    user-select: none;
}

div.nbinput.container div.prompt > div,
div.nboutput.container div.prompt > div {
    position: absolute;
    right: 0;
    margin-right: 0.3ex;
}

@media (max-width: 540px) {
    div.nbinput.container div.prompt,
    div.nboutput.container div.prompt {
        width: unset;
        text-align: left;
        padding: 0.4em;
    }
    div.nboutput.container div.prompt.empty {
        padding: 0;
    }

    div.nbinput.container div.prompt > div,
    div.nboutput.container div.prompt > div {
        position: unset;
    }
}

/* disable scrollbars on prompts */
div.nbinput.container div.prompt pre,
div.nboutput.container div.prompt pre {
    overflow: hidden;
}

/* input/output area */
div.nbinput.container div.input_area,
div.nboutput.container div.output_area {
    -webkit-flex: 1;
    flex: 1;
    overflow: auto;
}
@media (max-width: 540px) {
    div.nbinput.container div.input_area,
    div.nboutput.container div.output_area {
        width: 100%;
    }
}

/* input area */
div.nbinput.container div.input_area {
    border: 1px solid #e0e0e0;
    border-radius: 2px;
    /*background: #f5f5f5;*/
}

/* override MathJax center alignment in output cells */
div.nboutput.container div[class*=MathJax] {
    text-align: left !important;
}

/* override sphinx.ext.imgmath center alignment in output cells */
div.nboutput.container div.math p {
    text-align: left;
}

/* standard error */
div.nboutput.container div.output_area.stderr {
    background: #fdd;
}

/* ANSI colors */
.ansi-black-fg { color: #3E424D; }
.ansi-black-bg { background-color: #3E424D; }
.ansi-black-intense-fg { color: #282C36; }
.ansi-black-intense-bg { background-color: #282C36; }
.ansi-red-fg { color: #E75C58; }
.ansi-red-bg { background-color: #E75C58; }
.ansi-red-intense-fg { color: #B22B31; }
.ansi-red-intense-bg { background-color: #B22B31; }
.ansi-green-fg { color: #00A250; }
.ansi-green-bg { background-color: #00A250; }
.ansi-green-intense-fg { color: #007427; }
.ansi-green-intense-bg { background-color: #007427; }
.ansi-yellow-fg { color: #DDB62B; }
.ansi-yellow-bg { background-color: #DDB62B; }
.ansi-yellow-intense-fg { color: #B27D12; }
.ansi-yellow-intense-bg { background-color: #B27D12; }
.ansi-blue-fg { color: #208FFB; }
.ansi-blue-bg { background-color: #208FFB; }
.ansi-blue-intense-fg { color: #0065CA; }
.ansi-blue-intense-bg { background-color: #0065CA; }
.ansi-magenta-fg { color: #D160C4; }
.ansi-magenta-bg { background-color: #D160C4; }
.ansi-magenta-intense-fg { color: #A03196; }
.ansi-magenta-intense-bg { background-color: #A03196; }
.ansi-cyan-fg { color: #60C6C8; }
.ansi-cyan-bg { background-color: #60C6C8; }
.ansi-cyan-intense-fg { color: #258F8F; }
.ansi-cyan-intense-bg { background-color: #258F8F; }
.ansi-white-fg { color: #C5C1B4; }
.ansi-white-bg { background-color: #C5C1B4; }
.ansi-white-intense-fg { color: #A1A6B2; }
.ansi-white-intense-bg { background-color: #A1A6B2; }

.ansi-default-inverse-fg { color: #FFFFFF; }
.ansi-default-inverse-bg { background-color: #000000; }

.ansi-bold { font-weight: bold; }
.ansi-underline { text-decoration: underline; }


div.nbinput.container div.input_area div[class*=highlight] > pre,
div.nboutput.container div.output_area div[class*=highlight] > pre,
div.nboutput.container div.output_area div[class*=highlight].math,
div.nboutput.container div.output_area.rendered_html,
div.nboutput.container div.output_area > div.output_javascript,
div.nboutput.container div.output_area:not(.rendered_html) > img{
    padding: 5px;
    margin: 0;
}

/* fix copybtn overflow problem in chromium (needed for 'sphinx_copybutton') */
div.nbinput.container div.input_area > div[class^='highlight'],
div.nboutput.container div.output_area > div[class^='highlight']{
    overflow-y: hidden;
}

/* hide copybtn icon on prompts (needed for 'sphinx_copybutton') */
.prompt a.copybtn {
    display: none;
}

/* Some additional styling taken form the Jupyter notebook CSS */
div.rendered_html table {
  border: none;
  border-collapse: collapse;
  border-spacing: 0;
  color: black;
  font-size: 12px;
  table-layout: fixed;
}
div.rendered_html thead {
  border-bottom: 1px solid black;
  vertical-align: bottom;
}
div.rendered_html tr,
div.rendered_html th,
div.rendered_html td {
  text-align: right;
  vertical-align: middle;
  padding: 0.5em 0.5em;
  line-height: normal;
  white-space: normal;
  max-width: none;
  border: none;
}
div.rendered_html th {
  font-weight: bold;
}
div.rendered_html tbody tr:nth-child(odd) {
  background: #f5f5f5;
}
div.rendered_html tbody tr:hover {
  background: rgba(66, 165, 245, 0.2);
}
</style>
<div class="nbinput nblast docutils container">
<div class="prompt highlight-none notranslate"><div class="highlight"><pre><span></span>[ ]:
</pre></div>
</div>
<div class="input_area highlight-none notranslate"><div class="highlight"><pre>
<span></span>from nbev3devsim import ev3devsim_nb as eds
import jp_proxy_widget

#Load the nbtutor extension
%load_ext nbtutor

#https://github.com/AaronWatters/jp_doodle/blob/master/notebooks/misc/JQueryUI%20dialogextend%20plugin%20demo.ipynb
#Load and initialise the jquery.dialogextend package

cdn_url = &quot;https://cdn.jsdelivr.net/npm/binary-com-jquery-dialogextended@1.0.0/jquery.dialogextend.js&quot;
cdn_url = eds.get_file_path(&#39;js/jquery.dialogextend.js&#39;)
module_id = &quot;dialogExtend&quot;

# Load the module using a widget (any widget -- the module loads to the global jQuery object).
loader = jp_proxy_widget.JSProxyWidget()

# Configure the module to be loaded.
loader.require_js(module_id, cdn_url)

# Load the module
loader.js_init(&quot;&quot;&quot;
    element.requirejs([module_identifier], function(module_value) {
        //element.html(&quot;loaded &quot; + module_identifier + &quot; : &quot; + module_value);
    });
&quot;&quot;&quot;, module_identifier=module_id)
loader
</pre></div>
</div>
</div>
<div class="nbinput nblast docutils container">
<div class="prompt highlight-none notranslate"><div class="highlight"><pre><span></span>[ ]:
</pre></div>
</div>
<div class="input_area highlight-none notranslate"><div class="highlight"><pre>
<span></span>from nbev3devsim import ev3devsim_nb as eds

#Reset the notebook style
from IPython.core.display import display, HTML, Javascript

#display(HTML(&quot;&lt;style&gt;#notebook-container { resize:vertical; border: 5px solid;  width: 300px; resize: horizontal; overflow: auto; float:left !important;}&lt;/style&gt;&quot;))
display(HTML(&quot;&lt;style&gt;#notebook-container { width:50%; float:left !important;}&lt;/style&gt;&quot;))

#Launch the simulator
from nbev3devsim import ev3devsim_nb as eds
%reload_ext nbev3devsim

roboSim = eds.Ev3DevWidget()

roboSim.element.dialog();


roboSim.js_init(&quot;&quot;&quot;
element.dialog({ &quot;title&quot; : &quot;Robot Simulator&quot; }).dialogExtend({
        &quot;maximizable&quot; : true,
        &quot;dblclick&quot; : &quot;maximize&quot;,
        &quot;icons&quot; : { &quot;maximize&quot; : &quot;ui-icon-arrow-4-diag&quot; }});
&quot;&quot;&quot;)

display(roboSim)
</pre></div>
</div>
</div>
<div class="nbinput nblast docutils container">
<div class="prompt highlight-none notranslate"><div class="highlight"><pre><span></span>[ ]:
</pre></div>
</div>
<div class="input_area highlight-javascript notranslate"><div class="highlight"><pre>
<span></span><span class="o">%%</span><span class="nx">javascript</span>
<span class="c1">//This allows us to resize this view</span>
<span class="c1">//Click on the right hand edge to drag</span>
<span class="nx">$</span><span class="p">(</span> <span class="s2">&quot;#notebook-container&quot;</span> <span class="p">).</span><span class="nx">resizable</span><span class="p">({</span><span class="nx">ghost</span><span class="o">:</span> <span class="kc">false</span><span class="p">})</span>
</pre></div>
</div>
</div>
<div class="nbinput nblast docutils container">
<div class="prompt highlight-none notranslate"><div class="highlight"><pre><span></span>[ ]:
</pre></div>
</div>
<div class="input_area highlight-none notranslate"><div class="highlight"><pre>
<span></span>%load_ext nbtutor
%load_ext nbev3devsim
</pre></div>
</div>
</div>
<div class="section" id="3-Branches">
<h1>3 Branches</h1>
<p>So far we have concentrated mainly on sequential programs, where the flow of control proceeds through the program statements in linear sequence, except when it encounters loop element where the control flow is redirected back “up” the program to the start of a loop block.</p>
<p>In the previous notebook, you saw how the conditional <code class="docutils literal notranslate"><span class="pre">if..</span></code> statement could be used to optionally pass control to a set of instructions in the sequential programme <em>if</em> a particular condition was met.</p>
<p>The <code class="docutils literal notranslate"><span class="pre">if...</span></code> statement fits the the sequential program model by redirecting control flow, albeit briefly, to a set of “extra” commands if the conditional test evaluates true.</p>
<p>A sequential program will always follow the same sequentially order path. But to be useful, a robot program will often need to make decisions and behave differently in different circumstances. To do this, the program has to have alternative <em>branches</em> in the programme flow where we can follow different courses of actions depending on some conditional test.</p>
<p>Python provides an <code class="docutils literal notranslate"><span class="pre">if..else..</span></code> statement to do just that, and you will see how it is used in the following activities.</p>
<p><em>In other programming languages, this may often be referred to as an ``if…then…else…`` construct. In Python, the “then” is assumed.</em></p>
<div class="section" id="3.1-Activity:-Detecting-black-and-grey">
<h2>3.1 Activity: Detecting black and grey</h2>
<p>Load the <em>Grey and black</em> background into the simulator.</p>
<p>Download the programme to the simulator and then run it several times with the robot moved to different starting positions.</p>
<p>What does the programme cause the robot to do?</p>
<div class="nbinput nblast docutils container">
<div class="prompt highlight-none notranslate"><div class="highlight"><pre><span></span>[ ]:
</pre></div>
</div>
<div class="input_area highlight-none notranslate"><div class="highlight"><pre>
<span></span>%%sim_magic_preloaded

import playsound

# Configure a light sensor
colorLeft = ColorSensor(INPUT_2)

# Start the robot driving forwards
tank_drive.on(SpeedPercent(50), SpeedPercent(50))

#Sample the light sensor reading
sensor_value = colorLeft.reflected_light_intensity

#Check the light sensor reading
while sensor_value == 100:
    # Whilst we are on the white background
    # update the reading
    sensor_value = colorLeft.reflected_light_intensity
    # and display it
    print(sensor_value)

# When the reading is below 100
# we have started to see something.
# Drive a little way onto the band to get a good reading
tank_drive.on_for_rotations(SpeedPercent(50), SpeedPercent(50), 0.2)

#Check the sensor reading
sensor_value = colorLeft.reflected_light_intensity
# and display it
print(sensor_value)

# Now make a decision about what we see
if sensor_value &lt; 50:
    playsound.say(&quot;I see black&quot;)
else:
    playsound.say(&quot;I see grey&quot;)
</pre></div>
</div>
</div>
<div class="section" id="Question">
<h3>Question</h3>
<p>What does the robot do?</p>
</div>
<div class="section" id="Answer">
<h3>Answer</h3>
<p><em>Click the arrow in the sidebar to reveal the answer.</em></p>
<p>The robot moves forward over the white background until it reaches the grey or black area. If the background is black, the robot says <em>black</em>; otherwise, it says <em>grey</em>.</p>
<p>The programme works by driving the robot forwards and continues in that direction while it is over the white background (a reflected light sensor reading of 100). When the light sensor reading goes below the white background value of 100, control passes out of the while loop and on to the statement that drives the robot forwards a short distance further (0.2 wheel rotations) to ensure the sensor is fully over the band. The robot then checks its sensor reading, and makes a decision about what to
say based on the value of the sensor reading.</p>
<div class="section" id="Working-through-the-programme-flow">
<h4>Working through the programme flow</h4>
<p>The following flow chart shows how the flow of control passes through the programme.</p>
<img alt="../../_images/03803416f197f52b725c20fbe4d65ae9fac8eb55.jpg" src="../../_images/03803416f197f52b725c20fbe4d65ae9fac8eb55.jpg" />
<p>Although the <code class="docutils literal notranslate"><span class="pre">while</span></code> command does appear to offer some sort of branch like behaviour, will still think of it as a sequential style operator becuase the flow of control keeps trying to move in the same forwards direction.</p>
<p>In the branching <code class="docutils literal notranslate"><span class="pre">if..else..</span></code> operator, the program control flow takes one of two different “forward flowing” paths depending on whether the conditional statement evaluated as part of the <code class="docutils literal notranslate"><span class="pre">if..</span></code> statement evaluates true or false.</p>
<p>If it evaluates <code class="docutils literal notranslate"><span class="pre">True</span></code>, then the statements in the first “if” block of code are evaluate; if the condition evaluates <code class="docutils literal notranslate"><span class="pre">False</span></code>, then the statements in the <code class="docutils literal notranslate"><span class="pre">else</span></code> block are evaluated. In both cases, contorl then flows forwards to the next statement after the <code class="docutils literal notranslate"><span class="pre">if..else..</span></code> block.</p>
# Mermaid.js code

graph TD
    A(Start) --> B[Move forwards]
    B --> C{Light == 100}
    C --> |Yes| D[Display reading]
    D --> C
    C --> |No| E[Drive forward<br/>a short way]
    E --> F{Light < 50?}
    F --> |Yes| G[Say 'black']
    F --> |No| H[Say 'grey']
    G --> I(End)
    H --> I</div>
</div>
</div>
<div class="section" id="Activity:-Stepping-Through-An-if..else...-Statement">
<h2>Activity: Stepping Through An <code class="docutils literal notranslate"><span class="pre">if..else...</span></code> Statement</h2>
<p>In this activity we will look at another program to explore how <code class="docutils literal notranslate"><span class="pre">if...else..</span></code> works in more detail.</p>
<p>Inspect the code in the following cell? If you run the code cell, what do you think will happen?</p>
<p><em>Double click this cell to edit it and make your prediction here.</em></p>
<p>Once you have made your prediction, run the following cell, and in the markdown cell beneath it, record what happened and how it compared to your prediction.</p>
<p><em>You may find it informative to use ``nbtutor`` to step through each line of code in turn to see how the programme flow progresses. To do this, uncomment the ``%%nbtutor`` magic in the first line of the code cell by deleting the ``#`` at the start of the line before running the code cell.</em></p>
<div class="nbinput nblast docutils container">
<div class="prompt highlight-none notranslate"><div class="highlight"><pre><span></span>[ ]:
</pre></div>
</div>
<div class="input_area highlight-none notranslate"><div class="highlight"><pre>
<span></span>#%%nbtutor --reset --force
x = 1

if x == 1:
    print(&quot;x equals 1&quot;)
else:
    print(&quot;x does not equal 1&quot;)

print(&quot;All done...&quot;)
</pre></div>
</div>
</div>
<p><em>Double click this cell to edit it and record here what happened when you ran the code in the above cell. Did its behaviour match your prediction?</em></p>
<p>What do you think will happen when you run the following code cell?</p>
<p>Run the cell and use <em>nbtutor</em> to step through the programme. How does the programme flow differ from the case where <code class="docutils literal notranslate"><span class="pre">x</span></code> had the value <code class="docutils literal notranslate"><span class="pre">1</span></code>?</p>
<div class="nbinput nblast docutils container">
<div class="prompt highlight-none notranslate"><div class="highlight"><pre><span></span>[ ]:
</pre></div>
</div>
<div class="input_area highlight-none notranslate"><div class="highlight"><pre>
<span></span>%%nbtutor --reset --force
x = 2

if x == 1:
    print(&quot;x equals 1&quot;)
else:
    print(&quot;x does not equal 1&quot;)

print(&quot;All done...&quot;)
</pre></div>
</div>
</div>
<p>Click the arrow in the sidebar to reveal my observations.</p>
<p>In the cell where <code class="docutils literal notranslate"><span class="pre">x=1</span></code>, I predicted that the program would print the message <em>‘x equals 1’</em> and then the messge <em>‘All done…’</em>.</p>
<p>Viewing the trace, I could see how the programme started by initialising the <code class="docutils literal notranslate"><span class="pre">x</span></code> variable to the value <code class="docutils literal notranslate"><span class="pre">1</span></code>, then checked whether <code class="docutils literal notranslate"><span class="pre">x==1</span></code> (that is, whether <code class="docutils literal notranslate"><span class="pre">x</span></code> was equal to <code class="docutils literal notranslate"><span class="pre">1</span></code>); becuase it was, the programme then moved onto the <code class="docutils literal notranslate"><span class="pre">print(&quot;x</span> <span class="pre">equals</span> <span class="pre">1&quot;)</span></code> statement and printed the first message, then programme flow continued to the first instruction after the <code class="docutils literal notranslate"><span class="pre">if...else...</span></code> block, which was the statement that printed the <em>‘All done…’</em> message.</p>
<p>When I ran the programme with a value of <code class="docutils literal notranslate"><span class="pre">x</span></code> other then <code class="docutils literal notranslate"><span class="pre">1</span></code>, the control passed from the <code class="docutils literal notranslate"><span class="pre">if...</span></code> statement, where the conditional test evaluated as <code class="docutils literal notranslate"><span class="pre">False</span></code>, to the first line in the <code class="docutils literal notranslate"><span class="pre">else..</span></code> block, which printed the message <em>‘x does not equal’</em>, before moving on to the first line after the <code class="docutils literal notranslate"><span class="pre">if..else..</span></code> block as before.</p>
</div>
<div class="section" id="An-if..-without-an-else...">
<h2>An <code class="docutils literal notranslate"><span class="pre">if..</span></code> without an <code class="docutils literal notranslate"><span class="pre">else...</span></code></h2>
<p>It is sometimes useful to have just a single branch to the <code class="docutils literal notranslate"><span class="pre">if</span></code> statement. Python provides a simple <code class="docutils literal notranslate"><span class="pre">if...</span></code> statement for this purpose.</p>
<p>Run the following code cell as it stands, with the <code class="docutils literal notranslate"><span class="pre">x</span></code> variable taking the intial value <code class="docutils literal notranslate"><span class="pre">1</span></code> (<code class="docutils literal notranslate"><span class="pre">x=1</span></code>). Can you predict what will happen?</p>
<div class="nbinput nblast docutils container">
<div class="prompt highlight-none notranslate"><div class="highlight"><pre><span></span>[ ]:
</pre></div>
</div>
<div class="input_area highlight-none notranslate"><div class="highlight"><pre>
<span></span>#%%nbtutor --reset --force
x = 1

print(&quot;Are you ready?&quot;)

if x == 1:
    print(&quot;x equals 1&quot;)

print(&quot;All done...&quot;)
</pre></div>
</div>
</div>
<p>Try to predict what will happen if you change the initial value and run the cell again. Was your prediction correct?</p>
<p>Uncomment the <em>%%nbtutor</em> magic and run the code cell using different values of <code class="docutils literal notranslate"><span class="pre">x</span></code>, observing how the program flow progresses in each case.</p>
<p><em>Click on the arrow in the sidebar to reveal my observations.</em></p>
<p>With the initial value of the variable <code class="docutils literal notranslate"><span class="pre">x</span></code> set to <code class="docutils literal notranslate"><span class="pre">1</span></code> (<code class="docutils literal notranslate"><span class="pre">x</span> <span class="pre">=</span> <span class="pre">1</span></code>) the program displayed the messages <em>Are you ready?</em>, <em>x equals 1</em> and <em>All done</em> as the <code class="docutils literal notranslate"><span class="pre">if</span> <span class="pre">...</span></code> statement evaluated the <code class="docutils literal notranslate"><span class="pre">x</span> <span class="pre">==</span> <span class="pre">1</span></code> test condition as <code class="docutils literal notranslate"><span class="pre">True</span></code> and passed control <em>into</em> the <code class="docutils literal notranslate"><span class="pre">if..</span></code> block.</p>
<p>When <code class="docutils literal notranslate"><span class="pre">x</span></code> was initialised to a different value, for example as <code class="docutils literal notranslate"><span class="pre">x</span> <span class="pre">=</span> <span class="pre">2</span></code>, only the messages <em>Are you ready?</em> and <em>All done</em> were displayed as the <code class="docutils literal notranslate"><span class="pre">if..</span></code> conditional test failed and redirected control flow to the first statement <em>after</em> the <code class="docutils literal notranslate"><span class="pre">if..</span></code> block.</p>
</div>
<div class="section" id="3.4-Activity:-Combining-loops-and-branching-statements">
<h2>3.4 Activity: Combining loops and branching statements</h2>
<p>It is important to be clear that the condition in a branching statement (<code class="docutils literal notranslate"><span class="pre">if...</span></code> or <code class="docutils literal notranslate"><span class="pre">if...else...</span></code>) is checked only when execution reaches that part of the program.</p>
<p>In the examples above, you stepped through the programs and saw that execution passed through the <code class="docutils literal notranslate"><span class="pre">if</span></code> statement only once. When creating useful robot programs, we often want conditions to be checked repeatedly. For example the robot may need to repeatedly check that it has not bumped into an obstacle, or whether it has found a bright or dark area.</p>
<p>You have already seen how the <code class="docutils literal notranslate"><span class="pre">while...</span></code> loop tests a condition at the start of a loop and and then passes control to the statements inside the loop before looping back to test the <code class="docutils literal notranslate"><span class="pre">while...</span></code> condition again.</p>
<p>You may also recall from an earlier notebook that we also used an <code class="docutils literal notranslate"><span class="pre">if...</span></code> statment to return the control flow back to the top of a loop before all the statements in the loop body had been executed, or break out of a loop early and pass control to the first statement after the loop block.</p>
<p>This ability to combine loop and branching statements is very powerful and even a very simple programme can produce quite a complex robot behaviour.</p>
<p>For example, can you predict what the following programme will cause the robot to do when it is downloaded and run in the simulator?</p>
<p><strong>Before you run the programme, load in the Loop background to the simulator.</strong></p>
<p><em>Double click this cell to edit it and record your prediction.</em></p>
<div class="nbinput nblast docutils container">
<div class="prompt highlight-none notranslate"><div class="highlight"><pre><span></span>[ ]:
</pre></div>
</div>
<div class="input_area highlight-none notranslate"><div class="highlight"><pre>
<span></span>%%sim_magic_preloaded

tank_drive.on(SpeedPercent(30), SpeedPercent(30))

while True:
    if colorLeft.reflected_light_intensity &lt; 100:
        tank_drive.on_for_rotations(SpeedPercent(-30),
                                    SpeedPercent(-30), 2)

        tank_turn.on_for_rotations(-100, SpeedPercent(75), 2)
        tank_drive.on(SpeedPercent(30), SpeedPercent(30))

</pre></div>
</div>
</div>
<p>Download the program to the simulator and run it there to check your prediction. After a minute or two, stop the programme from executing.</p>
<p>How does the behaviour of the programme lead to the robot’s emergent behaviour in the simulator?</p>
<div class="section" id="Discussion">
<h3>Discussion</h3>
<p><em>Click on the arrow in the sidebar to reveal my observations</em></p>
<p>When the program runs, the robot will explore the inside of the black oval, remaining inside it and reversing direction each time it encounters the black line.</p>
<p>The program is constructed from an <code class="docutils literal notranslate"><span class="pre">if</span></code> statement inside a <code class="docutils literal notranslate"><span class="pre">forever</span></code> loop. The <code class="docutils literal notranslate"><span class="pre">if</span></code> statement checks the light sensor reading; when this is low (which it will be when the black line is reached) the motor direction is reversed.</p>
<p>The <code class="docutils literal notranslate"><span class="pre">while</span> <span class="pre">True:</span></code> loop is a so-called <em>infinite loop</em> that will run indefinitely. In this case it is useful because we want the robot to continue to keep on behaving in the same way as the prigramme runs.</p>
<p>In other circumstances, we might want the loop to continue only while some condition holds true. In such cases, using the <code class="docutils literal notranslate"><span class="pre">while</span></code> statement to test the truth of a conitional statement is more useful.</p>
</div>
</div>
<div class="section" id="Multiple-Conditions-Using-if..elif..else..">
<h2>Multiple Conditions Using <code class="docutils literal notranslate"><span class="pre">if..elif..else..</span></code></h2>
<p>The <code class="docutils literal notranslate"><span class="pre">if...else..</span></code> statement allows us to creating a branching control flow statement that performs on conditional test and then chooses between two alternative outcomes depending on the result of the test.</p>
<p>Python also supports a yet more complex branch construction in the form of an <code class="docutils literal notranslate"><span class="pre">if..elif..else..</span></code> statement that allows us to make multiple conditional tests. Run the following code cell and then use <code class="docutils literal notranslate"><span class="pre">nbtutor</span></code> to explore the flow through the programme.</p>
<div class="nbinput nblast docutils container">
<div class="prompt highlight-none notranslate"><div class="highlight"><pre><span></span>[ ]:
</pre></div>
</div>
<div class="input_area highlight-none notranslate"><div class="highlight"><pre>
<span></span>%%nbtutor --reset --force

days_of_week = [&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;,
                &#39;Friday&#39;, &#39;Saturday&#39;, &#39;Sunday&#39;]

for day in days_of_week:
    print(f&#39;Today is {day}...&#39;)

    if day == &#39;Wednesday&#39;:
        print(&#39;...half day closing&#39;)
    elif day in [&#39;Saturday&#39;, &#39;Sunday&#39;]:
        print(&#39;...the weekend&#39;)
    else:
        print(&#39;...a weekday&#39;)

print(&quot;And that&#39;s all the days of the week.&quot;&quot;)
</pre></div>
</div>
</div>
<p>We can also have multiple <code class="docutils literal notranslate"><span class="pre">elif</span></code> statements between the opening <code class="docutils literal notranslate"><span class="pre">if..</span></code> and the closing <code class="docutils literal notranslate"><span class="pre">else</span></code>.</p>
<p>Read through the code in the following and try to work out what the program will do and how the control flow will pass though the program as it executes.</p>
<div class="nbinput nblast docutils container">
<div class="prompt highlight-none notranslate"><div class="highlight"><pre><span></span>[ ]:
</pre></div>
</div>
<div class="input_area highlight-none notranslate"><div class="highlight"><pre>
<span></span># TO DO
# need a simple toolbar buttom to toggle the notebook display?
from IPython.display import HTML
display(HTML(&quot;&lt;style&gt;#notebook-container { width:100% !important; float:left !important;}&lt;/style&gt;&quot;))
display(HTML(&quot;&lt;style&gt;#notebook-container { width:50% !important; float:left !important;}&lt;/style&gt;&quot;))

</pre></div>
</div>
</div>
<div class="nbinput nblast docutils container">
<div class="prompt highlight-none notranslate"><div class="highlight"><pre><span></span>[ ]:
</pre></div>
</div>
<div class="input_area highlight-none notranslate"><div class="highlight"><pre>
<span></span>%%nbtutor --reset --force

days_of_week = [&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;,
                &#39;Friday&#39;, &#39;Saturday&#39;, &#39;Sunday&#39;]

for day in days_of_week:
    print(f&#39;Today is {day}...&#39;)

    if day == &#39;Monday&#39;:
        print(&quot;...I don&#39;t like Mondays...&quot;)
    elif day == &#39;Tuesday&#39;:
        print(&#39;...Ruby Tuesday&#39;)
    elif day == &#39;Friday&#39;:
        print(&quot;...Friday I&#39;m In Love&quot;)
    else:
        print(&quot;...I don&#39;t know a song title for that day&quot;)
</pre></div>
</div>
</div>
<p>Now run the previous code cell and step through its execution using <em>nbtutor</em>; observe how the control flow steps increasing through the stack of <code class="docutils literal notranslate"><span class="pre">..elif..</span></code> tests as the <code class="docutils literal notranslate"><span class="pre">for..</span></code> loop iterates through the items in the <code class="docutils literal notranslate"><span class="pre">days_of_week</span></code> list.</p>
<p>Note that there is no requirement that you test the same variable in each step. The different steps could test a different variable or range of variables.</p>
<p>For example, in the following programme, we might decide what to take out with us on a walk based on a variety of conditions:</p>
<div class="nbinput nblast docutils container">
<div class="prompt highlight-none notranslate"><div class="highlight"><pre><span></span>[ ]:
</pre></div>
</div>
<div class="input_area highlight-none notranslate"><div class="highlight"><pre>
<span></span>raining = False
temperature = &#39;warm&#39;

if raining:
    print(&quot;Wear boots&quot;)
elif temperature == &#39;warm&#39;:
    print(&quot;Wear sandals&quot;)
else:
    print(&quot;Wear shoes&quot;)
</pre></div>
</div>
</div>
<p>Also note that there is an <em>order</em> in which we test the various conditions as the control passes through the <code class="docutils literal notranslate"><span class="pre">if..elif..</span></code> conditional tests. We can use this as an informal way of prioritising one behaviout over another:</p>
<div class="highlight-python notranslate"><div class="highlight"><pre><span></span><span class="k">if</span> <span class="n">this_really_important_thing</span><span class="p">:</span>
    <span class="o">...</span>
<span class="k">elif</span> <span class="n">this_less_important_thing</span><span class="p">:</span>
    <span class="o">...</span>
<span class="k">elif</span> <span class="n">this</span> <span class="n">minor_thing</span><span class="p">:</span>
    <span class="o">...</span>
<span class="k">else</span><span class="p">:</span>
    <span class="o">...</span>
</pre></div>
</div>
</div>
<div class="section" id="3.5-Challenge:-Three-shades-of-grey">
<h2>3.5 Challenge: Three shades of grey</h2>
<p>The program at the start of this notebook (in Section 3.1) showed how an <code class="docutils literal notranslate"><span class="pre">if...else...</span></code> statement could be used to decide between black and grey areas. The background (loaded into the simulator as the <em>Grey and black</em> background) actually contains three different shades: black, dark grey, and light grey. Can you construct a program that will report which the robot encounters?</p>
<p>A copy of the original program is provided below as a starting point. You will need to extend the code so that it can decide between three grey alternatives as well as the black band and say which band it saw.</p>
<div class="nbinput nblast docutils container">
<div class="prompt highlight-none notranslate"><div class="highlight"><pre><span></span>[ ]:
</pre></div>
</div>
<div class="input_area highlight-none notranslate"><div class="highlight"><pre>
<span></span>%%sim_magic_preloaded

# Use this programme with the &quot;Grey and black&quot; background

import playsound

# Configure a light sensor
colorLeft = ColorSensor(INPUT_2)

# Start the robot driving forwards
tank_drive.on(SpeedPercent(50), SpeedPercent(50))

#Sample the light sensor reading
sensor_value = colorLeft.reflected_light_intensity

#Check the light sensor reading
while sensor_value == 100:
    # Whilst we are on the white background
    # update the reading
    sensor_value = colorLeft.reflected_light_intensity
    # and display it
    print(sensor_value)

# When the reading is below 100
# we have started to see something.
# Drive a little way onto the band to get a good reading
tank_drive.on_for_rotations(SpeedPercent(50), SpeedPercent(50), 0.2)

#Check the sensor reading
sensor_value = colorLeft.reflected_light_intensity
# and display it
print(sensor_value)

# Now make a decision about what we see
if sensor_value &lt; 50:
    playsound.say(&quot;I see black&quot;)
else:
    playsound.say(&quot;I see grey&quot;)
</pre></div>
</div>
</div>
<p>When you have modified the code, run the cell to download it to the simulator, ensure the <em>Grey and black</em> background is loaded, and then run the programme in the simulator for various starting positions of the robot. Does it behave as you intended?</p>
<div class="section" id="Hint:-click-the-arrow-in-the-sidebar-to-reveal-a-hint">
<h3>Hint: click the arrow in the sidebar to reveal a hint</h3>
<p>The original program uses an <code class="docutils literal notranslate"><span class="pre">if..else..</span></code> condition to distinguish between black and grey reflected light readings. An <code class="docutils literal notranslate"><span class="pre">..elif..</span></code> statement lets you test alternative values within the same <code class="docutils literal notranslate"><span class="pre">if..else..</span></code> block.</p>
<p>To identify the values to use in the condition statements, inspect the simulator output window messages to see what sensor values are reported when the robot goes over different bands.</p>
</div>
<div class="section" id="Worked-Answer">
<h3>Worked Answer</h3>
<p>Click the arrow in the sidebar to display a worked answer.</p>
<p>The robot sees the following values over each of the grey bands:</p>
<ul class="simple">
<li><p>light grey: ~86</p></li>
<li><p>medium grey: ~82</p></li>
<li><p>dark grey: ~50</p></li>
<li><p>black: 0</p></li>
</ul>
<p>Generally, when we see lots of decimal places, we assume that the chances of ever seeing exactly the same sequence of numbers may be unlikely, so rather than testing for an exact match, we use one or more threshold tests to see if the number lies within a particular <em>range</em> of values, or is above a certain minimum value.</p>
<p>If we assume those sensor readings are reliable, and the same value is alsway reported for each of those bands, we can make the make the following decisions:</p>
<div class="highlight-python notranslate"><div class="highlight"><pre><span></span><span class="k">if</span> <span class="n">sensor_value</span> <span class="o">&gt;</span> <span class="mi">86</span><span class="p">:</span>
    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;light grey&#39;</span><span class="p">)</span>
<span class="k">elif</span> <span class="n">sensor_value</span> <span class="o">&gt;</span> <span class="mi">82</span><span class="p">:</span>
    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;medium grey&#39;</span><span class="p">)</span>
<span class="k">elif</span> <span class="n">sensor_value</span> <span class="o">&gt;</span> <span class="mi">50</span><span class="p">:</span>
    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;dark grey&#39;</span><span class="p">)</span>
<span class="k">else</span><span class="p">:</span>
    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;black&#39;</span><span class="p">)</span>
</pre></div>
</div>
<p>We can make the test even more reliable by setting the threshold test values to values that are halfway between the expected values for a particular band. For example, 84, rather than 82, for distinguishing between light and medium grey; 66 rather than 82 for distinguishing between dark and medium grey; and 25 rather than 50 for distinguising between black and dark grey.</p>
<p>__TO DO: an activity with noise values around the sensor would be useful here._</p>
<p>This means that if there is a slight error in the reading, our thresholded test is like to make the right decision about which side of the threshold value the (noisy) reading actually falls on.</p>
<p>__ TO DO - a diagram to illustrate this would be useful. __</p>
<div class="nbinput nblast docutils container">
<div class="prompt highlight-none notranslate"><div class="highlight"><pre><span></span>[ ]:
</pre></div>
</div>
<div class="input_area highlight-none notranslate"><div class="highlight"><pre>
<span></span>%%sim_magic_preloaded

# Use this programme with the &quot;Grey and black&quot; background

import playsound

# Configure a light sensor
colorLeft = ColorSensor(INPUT_2)

# Start the robot driving forwards
tank_drive.on(SpeedPercent(50), SpeedPercent(50))

#Sample the light sensor reading
sensor_value = colorLeft.reflected_light_intensity

#Check the light sensor reading
while sensor_value == 100:
    # Whilst we are on the white background
    # update the reading
    sensor_value = colorLeft.reflected_light_intensity
    # and display it
    print(sensor_value)

# When the reading is below 100
# we have started to see something.
# Drive onto the band to get a good reading
tank_drive.on_for_rotations(SpeedPercent(50), SpeedPercent(50), 0.2)

#Check the sensor reading
sensor_value = colorLeft.reflected_light_intensity
# and display it
print(sensor_value)

# Now make a decision about what we see
if sensor_value &gt;  86:
    playsound.say(&quot;I see light grey&quot;)
elif sensor_value &gt; 82:
    playsound.say(&quot;I see medium grey&quot;)
elif sensor_value &gt; 50:
    playsound.say(&quot;I see dark grey&quot;)
else:
    playsound.say(&quot;I see black&quot;)
</pre></div>
</div>
</div>
<p>Other solutions are possible.</p>
<p>One thing you might notice is that sometimes the robot gives the wrong answer, for example if the sensor is not completely over the band and gives a reading that does not exactly match a value you used in your conditional tests.</p>
<p>You will see how to address this sensitivity in the next notebook.</p>
</div>
</div>
<div class="section" id="Summary">
<h2>Summary</h2>
<p>In this notebook, you have seen how <code class="docutils literal notranslate"><span class="pre">if..</span></code> statements can be used to make a variety of decisions and trigger a range of different actions based on one or more tested conditions. In particular:</p>
<ul class="simple">
<li><p>a simple <code class="docutils literal notranslate"><span class="pre">if..</span></code> statement lets a perform one or more actions once and once only if a single conditional test evaluates true;</p></li>
<li><p>an <code class="docutils literal notranslate"><span class="pre">if..else..</span></code> statement allows us to <em>branch</em> between two possible futures based on the whether a single conditional test evaluates as true; if it is true, do one action, if not, do the other;</p></li>
<li><p>an <code class="docutils literal notranslate"><span class="pre">if..elif..else..</span></code> construction lets us run mutliple different conditional tests. If the first test is true, do one thing, otherwise test the next thing, and if that is true, do something, otherwise, do another test, and so on. If all the other <code class="docutils literal notranslate"><span class="pre">elif..</span></code> tests evaluate false, do the final <code class="docutils literal notranslate"><span class="pre">else</span></code> condition.</p></li>
</ul>
</div>
<div class="section" id="Addendum">
<h2>Addendum</h2>
<p>The IPython interpreter that underpins code execution in Jupyter notebooks has a range of display functions that are capable of embedding and playing a wide variety of media, include audio and video files.</p>
<p>For example, if you run the following code cell, you can embed a Youtube video given the unique video identifier which you will find in every Youtube video URL / web address:</p>
<div class="nbinput nblast docutils container">
<div class="prompt highlight-none notranslate"><div class="highlight"><pre><span></span>[ ]:
</pre></div>
</div>
<div class="input_area highlight-none notranslate"><div class="highlight"><pre>
<span></span>from IPython.lib.display import YouTubeVideo
YouTubeVideo(&#39;mGgMZpGYiy8&#39;)
</pre></div>
</div>
</div>
<p>What, me, dodgy goth? Goth hippy groover, more like…;-)</p>
</div>
</div>


            <div class="clearer"></div>
          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>