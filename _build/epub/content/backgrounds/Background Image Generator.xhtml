<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Generate Background Images for ev3devsim Robot Simulator</title>
    <link rel="stylesheet" href="../../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../../_static/pygments.css" type="text/css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  
<style>
/* CSS for nbsphinx extension */

/* remove conflicting styling from Sphinx themes */
div.nbinput.container,
div.nbinput.container div.prompt,
div.nbinput.container div.input_area,
div.nbinput.container div[class*=highlight],
div.nbinput.container div[class*=highlight] pre,
div.nboutput.container,
div.nboutput.container div.prompt,
div.nboutput.container div.output_area,
div.nboutput.container div[class*=highlight],
div.nboutput.container div[class*=highlight] pre {
    background: none;
    border: none;
    padding: 0 0;
    margin: 0;
    box-shadow: none;
}

/* avoid gaps between output lines */
div.nboutput.container div[class*=highlight] pre {
    line-height: normal;
}

/* input/output containers */
div.nbinput.container,
div.nboutput.container {
    display: -webkit-flex;
    display: flex;
    align-items: flex-start;
    margin: 0;
    width: 100%;
}
@media (max-width: 540px) {
    div.nbinput.container,
    div.nboutput.container {
        flex-direction: column;
    }
}

/* input container */
div.nbinput.container {
    padding-top: 5px;
}

/* last container */
div.nblast.container {
    padding-bottom: 5px;
}

/* input prompt */
div.nbinput.container div.prompt pre {
    color: #307FC1;
}

/* output prompt */
div.nboutput.container div.prompt pre {
    color: #BF5B3D;
}

/* all prompts */
div.nbinput.container div.prompt,
div.nboutput.container div.prompt {
    width: 4.5ex;
    padding-top: 5px;
    position: relative;
    user-select: none;
}

div.nbinput.container div.prompt > div,
div.nboutput.container div.prompt > div {
    position: absolute;
    right: 0;
    margin-right: 0.3ex;
}

@media (max-width: 540px) {
    div.nbinput.container div.prompt,
    div.nboutput.container div.prompt {
        width: unset;
        text-align: left;
        padding: 0.4em;
    }
    div.nboutput.container div.prompt.empty {
        padding: 0;
    }

    div.nbinput.container div.prompt > div,
    div.nboutput.container div.prompt > div {
        position: unset;
    }
}

/* disable scrollbars on prompts */
div.nbinput.container div.prompt pre,
div.nboutput.container div.prompt pre {
    overflow: hidden;
}

/* input/output area */
div.nbinput.container div.input_area,
div.nboutput.container div.output_area {
    -webkit-flex: 1;
    flex: 1;
    overflow: auto;
}
@media (max-width: 540px) {
    div.nbinput.container div.input_area,
    div.nboutput.container div.output_area {
        width: 100%;
    }
}

/* input area */
div.nbinput.container div.input_area {
    border: 1px solid #e0e0e0;
    border-radius: 2px;
    background: #f5f5f5;
}

/* override MathJax center alignment in output cells */
div.nboutput.container div[class*=MathJax] {
    text-align: left !important;
}

/* override sphinx.ext.imgmath center alignment in output cells */
div.nboutput.container div.math p {
    text-align: left;
}

/* standard error */
div.nboutput.container div.output_area.stderr {
    background: #fdd;
}

/* ANSI colors */
.ansi-black-fg { color: #3E424D; }
.ansi-black-bg { background-color: #3E424D; }
.ansi-black-intense-fg { color: #282C36; }
.ansi-black-intense-bg { background-color: #282C36; }
.ansi-red-fg { color: #E75C58; }
.ansi-red-bg { background-color: #E75C58; }
.ansi-red-intense-fg { color: #B22B31; }
.ansi-red-intense-bg { background-color: #B22B31; }
.ansi-green-fg { color: #00A250; }
.ansi-green-bg { background-color: #00A250; }
.ansi-green-intense-fg { color: #007427; }
.ansi-green-intense-bg { background-color: #007427; }
.ansi-yellow-fg { color: #DDB62B; }
.ansi-yellow-bg { background-color: #DDB62B; }
.ansi-yellow-intense-fg { color: #B27D12; }
.ansi-yellow-intense-bg { background-color: #B27D12; }
.ansi-blue-fg { color: #208FFB; }
.ansi-blue-bg { background-color: #208FFB; }
.ansi-blue-intense-fg { color: #0065CA; }
.ansi-blue-intense-bg { background-color: #0065CA; }
.ansi-magenta-fg { color: #D160C4; }
.ansi-magenta-bg { background-color: #D160C4; }
.ansi-magenta-intense-fg { color: #A03196; }
.ansi-magenta-intense-bg { background-color: #A03196; }
.ansi-cyan-fg { color: #60C6C8; }
.ansi-cyan-bg { background-color: #60C6C8; }
.ansi-cyan-intense-fg { color: #258F8F; }
.ansi-cyan-intense-bg { background-color: #258F8F; }
.ansi-white-fg { color: #C5C1B4; }
.ansi-white-bg { background-color: #C5C1B4; }
.ansi-white-intense-fg { color: #A1A6B2; }
.ansi-white-intense-bg { background-color: #A1A6B2; }

.ansi-default-inverse-fg { color: #FFFFFF; }
.ansi-default-inverse-bg { background-color: #000000; }

.ansi-bold { font-weight: bold; }
.ansi-underline { text-decoration: underline; }


div.nbinput.container div.input_area div[class*=highlight] > pre,
div.nboutput.container div.output_area div[class*=highlight] > pre,
div.nboutput.container div.output_area div[class*=highlight].math,
div.nboutput.container div.output_area.rendered_html,
div.nboutput.container div.output_area > div.output_javascript,
div.nboutput.container div.output_area:not(.rendered_html) > img{
    padding: 5px;
}

/* fix copybtn overflow problem in chromium (needed for 'sphinx_copybutton') */
div.nbinput.container div.input_area > div[class^='highlight'],
div.nboutput.container div.output_area > div[class^='highlight']{
    overflow-y: hidden;
}

/* hide copybtn icon on prompts (needed for 'sphinx_copybutton') */
.prompt a.copybtn {
    display: none;
}

/* Some additional styling taken form the Jupyter notebook CSS */
div.rendered_html table {
  border: none;
  border-collapse: collapse;
  border-spacing: 0;
  color: black;
  font-size: 12px;
  table-layout: fixed;
}
div.rendered_html thead {
  border-bottom: 1px solid black;
  vertical-align: bottom;
}
div.rendered_html tr,
div.rendered_html th,
div.rendered_html td {
  text-align: right;
  vertical-align: middle;
  padding: 0.5em 0.5em;
  line-height: normal;
  white-space: normal;
  max-width: none;
  border: none;
}
div.rendered_html th {
  font-weight: bold;
}
div.rendered_html tbody tr:nth-child(odd) {
  background: #f5f5f5;
}
div.rendered_html tbody tr:hover {
  background: rgba(66, 165, 245, 0.2);
}
</style>
<div class="section" id="Generate-Background-Images-for-ev3devsim-Robot-Simulator">
<h1>Generate Background Images for <code class="docutils literal notranslate"><span class="pre">ev3devsim</span></code> Robot Simulator</h1>
<p>Simple routes for generating png files for use in <code class="docutils literal notranslate"><span class="pre">ev3devsim</span></code> robot simulator.</p>
<p>Image size: width 2362px, height 1143px.</p>
<p><em>Could be useful to support interactive canvas drawing of backgrounds too?</em></p>
<div class="nbinput nblast docutils container">
<div class="prompt highlight-none notranslate"><div class="highlight"><pre><span></span>[1]:
</pre></div>
</div>
<div class="input_area highlight-ipython3 notranslate"><div class="highlight"><pre>
<span></span>from IPython.display import Image as I
from PIL import Image, ImageDraw

mode = &#39;RGB&#39;
size = (2362, 1143)
color = &#39;white&#39;
</pre></div>
</div>
</div>
<div class="section" id="Blank-Image">
<h2>Blank Image</h2>
<div class="nbinput nblast docutils container">
<div class="prompt highlight-none notranslate"><div class="highlight"><pre><span></span>[25]:
</pre></div>
</div>
<div class="input_area highlight-ipython3 notranslate"><div class="highlight"><pre>
<span></span>filename = &#39;_blank.png&#39;

img = Image.new(mode, size, color)
img.save(filename)
</pre></div>
</div>
</div>
</div>
<div class="section" id="Greys">
<h2>Greys</h2>
<div class="nbinput docutils container">
<div class="prompt highlight-none notranslate"><div class="highlight"><pre><span></span>[26]:
</pre></div>
</div>
<div class="input_area highlight-ipython3 notranslate"><div class="highlight"><pre>
<span></span>filename = &#39;_greys.png&#39;

img = Image.new(mode, size, color)
draw = ImageDraw.Draw(img)

draw.rectangle([(800, 300), (1000, 900)], fill=&#39;gainsboro&#39;)
draw.rectangle([(1200, 300), (1400, 900)], fill=&#39;lightgrey&#39;)
draw.rectangle([(1600, 300), (1800, 900)], fill=&#39;grey&#39;)
draw.rectangle([(2000, 300), (2200, 900)], fill=&#39;black&#39;)
img.save(filename)
I(filename)
</pre></div>
</div>
</div>
<div class="nboutput nblast docutils container">
<div class="prompt highlight-none notranslate"><div class="highlight"><pre><span></span>[26]:
</pre></div>
</div>
<div class="output_area docutils container">
<img alt="../../_images/content_backgrounds_Background_Image_Generator_5_0.png" src="../../_images/content_backgrounds_Background_Image_Generator_5_0.png" />
</div>
</div>
</div>
<div class="section" id="Grey-and-Black">
<h2>Grey and Black</h2>
<div class="nbinput docutils container">
<div class="prompt highlight-none notranslate"><div class="highlight"><pre><span></span>[27]:
</pre></div>
</div>
<div class="input_area highlight-ipython3 notranslate"><div class="highlight"><pre>
<span></span>filename = &#39;_grey_and_black.png&#39;

img = Image.new(mode, size, color)
draw = ImageDraw.Draw(img)

striped_band = 600
long_band = 100
band_height = 100

left_origin = 300
band_width = 400

#Black band
draw.rectangle([(left_origin, long_band), (left_origin + 4 * band_width, long_band + band_height)], fill=&#39;black&#39;)

#Light grey / black / grey band
draw.rectangle([(left_origin, striped_band), (left_origin + band_width, striped_band + band_height)], fill=&#39;lightgrey&#39;)
draw.rectangle([(left_origin + band_width, striped_band), (left_origin + 2 * band_width, striped_band + band_height)], fill=&#39;black&#39;)
draw.rectangle([(left_origin + 2 * band_width, striped_band), (left_origin + 3 * band_width, striped_band + band_height)], fill=&#39;gainsboro&#39;)
draw.rectangle([(left_origin + 3 * band_width, striped_band), (left_origin + 4 * band_width, striped_band + band_height)], fill=&#39;grey&#39;)

img.save(filename)
I(filename)
</pre></div>
</div>
</div>
<div class="nboutput nblast docutils container">
<div class="prompt highlight-none notranslate"><div class="highlight"><pre><span></span>[27]:
</pre></div>
</div>
<div class="output_area docutils container">
<img alt="../../_images/content_backgrounds_Background_Image_Generator_7_0.png" src="../../_images/content_backgrounds_Background_Image_Generator_7_0.png" />
</div>
</div>
</div>
<div class="section" id="Square">
<h2>Square</h2>
<div class="nbinput docutils container">
<div class="prompt highlight-none notranslate"><div class="highlight"><pre><span></span>[28]:
</pre></div>
</div>
<div class="input_area highlight-ipython3 notranslate"><div class="highlight"><pre>
<span></span>filename = &#39;_square.png&#39;

img = Image.new(mode, size, color)
draw = ImageDraw.Draw(img)

draw.rectangle([(900, 400), (1300, 800)], fill=&#39;grey&#39;)

draw.rectangle([(600, 100), (1600, 1100)], outline =&quot;grey&quot;, width=20)

img.save(filename)
I(filename)
</pre></div>
</div>
</div>
<div class="nboutput nblast docutils container">
<div class="prompt highlight-none notranslate"><div class="highlight"><pre><span></span>[28]:
</pre></div>
</div>
<div class="output_area docutils container">
<img alt="../../_images/content_backgrounds_Background_Image_Generator_9_0.png" src="../../_images/content_backgrounds_Background_Image_Generator_9_0.png" />
</div>
</div>
</div>
<div class="section" id="Loop">
<h2>Loop</h2>
<div class="nbinput nblast docutils container">
<div class="prompt highlight-none notranslate"><div class="highlight"><pre><span></span>[29]:
</pre></div>
</div>
<div class="input_area highlight-ipython3 notranslate"><div class="highlight"><pre>
<span></span>#https://stackoverflow.com/a/50145023/454773

def rounded_rectangle(self: ImageDraw, xy, corner_radius, fill=None, outline=None):
    upper_left_point = xy[0]
    bottom_right_point = xy[1]
    self.rectangle(
        [
            (upper_left_point[0], upper_left_point[1] + corner_radius),
            (bottom_right_point[0], bottom_right_point[1] - corner_radius)
        ],
        fill=fill,
        outline=outline
    )
    self.rectangle(
        [
            (upper_left_point[0] + corner_radius, upper_left_point[1]),
            (bottom_right_point[0] - corner_radius, bottom_right_point[1])
        ],
        fill=fill,
        outline=outline
    )
    self.pieslice([upper_left_point, (upper_left_point[0] + corner_radius * 2, upper_left_point[1] + corner_radius * 2)],
        180,
        270,
        fill=fill,
        outline=outline
    )
    self.pieslice([(bottom_right_point[0] - corner_radius * 2, bottom_right_point[1] - corner_radius * 2), bottom_right_point],
        0,
        90,
        fill=fill,
        outline=outline
    )
    self.pieslice([(upper_left_point[0], bottom_right_point[1] - corner_radius * 2), (upper_left_point[0] + corner_radius * 2, bottom_right_point[1])],
        90,
        180,
        fill=fill,
        outline=outline
    )
    self.pieslice([(bottom_right_point[0] - corner_radius * 2, upper_left_point[1]), (bottom_right_point[0], upper_left_point[1] + corner_radius * 2)],
        270,
        360,
        fill=fill,
        outline=outline
    )


ImageDraw.rounded_rectangle = rounded_rectangle
</pre></div>
</div>
</div>
<div class="nbinput docutils container">
<div class="prompt highlight-none notranslate"><div class="highlight"><pre><span></span>[31]:
</pre></div>
</div>
<div class="input_area highlight-ipython3 notranslate"><div class="highlight"><pre>
<span></span>filename = &#39;_loop.png&#39;

img = Image.new(mode, size, color)
draw = ImageDraw.Draw(img)

draw.rounded_rectangle([(200, 200), (1900, 1000)], 80, fill=&#39;black&#39;)
draw.rounded_rectangle([(300, 300), (1800, 900)], 50, fill=&#39;white&#39;)
img.save(filename)
I(filename)
</pre></div>
</div>
</div>
<div class="nboutput nblast docutils container">
<div class="prompt highlight-none notranslate"><div class="highlight"><pre><span></span>[31]:
</pre></div>
</div>
<div class="output_area docutils container">
<img alt="../../_images/content_backgrounds_Background_Image_Generator_12_0.png" src="../../_images/content_backgrounds_Background_Image_Generator_12_0.png" />
</div>
</div>
</div>
<div class="section" id="Radial-Gradient-(Braitenberg)">
<h2>Radial Gradient (Braitenberg)</h2>
<div class="nbinput docutils container">
<div class="prompt highlight-none notranslate"><div class="highlight"><pre><span></span>[14]:
</pre></div>
</div>
<div class="input_area highlight-ipython3 notranslate"><div class="highlight"><pre>
<span></span>import math

img = Image.new(mode, size, color)


innerBlue = [80, 80, 255] #Color at the center
outerBlue = [0, 0, 80] #Color at the corners
blues = (&#39;_radial_blue.png&#39;, innerBlue, outerBlue)

innerRed = [255, 80, 80] #Color at the center
outerRed = [80, 0, 0] #Color at the corners
reds = (&#39;_radial_red.png&#39;, innerRed, outerRed)

innerGrey = [255, 255, 255] #Color at the center
outerGrey = [0, 0, 0] #Color at the corners
greys = (&#39;_radial_grey.png&#39;, innerGrey, outerGrey)


#https://stackoverflow.com/a/30669765/454773
def radial(img, radial_config):
    &quot;&quot;&quot;Gnerate a radial gradient image.&quot;&quot;&quot;
    (filename, innerColor, outerColor) = radial_config
    for y in range(size[1]):
        for x in range(size[0]):

            #Find the distance to the center
            distanceToCenter = math.sqrt((x - size[0]/2) ** 2 + (y - size[1]/2) ** 2)

            #Make it on a scale from 0 to 1
            distanceToCenter = float(distanceToCenter) / (math.sqrt(2) * size[0]/2)

            #Make non-linear
            #distanceToCenter = math.sqrt(distanceToCenter)
            distanceToCenter = distanceToCenter**(1./3.)

            #Calculate r, g, and b values
            r = outerColor[0] * distanceToCenter + innerColor[0] * (1 - distanceToCenter)
            g = outerColor[1] * distanceToCenter + innerColor[1] * (1 - distanceToCenter)
            b = outerColor[2] * distanceToCenter + innerColor[2] * (1 - distanceToCenter)

            #Place the pixel
            img.putpixel((x, y), (int(r), int(g), int(b)))

    img.save(filename)
    return filename, img

#filename, _ = radial(img, blues)
#filename, _ = radial(img, reds)
filename, _ = radial(img, greys)

I(filename)
</pre></div>
</div>
</div>
<div class="nboutput nblast docutils container">
<div class="prompt highlight-none notranslate"><div class="highlight"><pre><span></span>[14]:
</pre></div>
</div>
<div class="output_area docutils container">
<img alt="../../_images/content_backgrounds_Background_Image_Generator_14_0.png" src="../../_images/content_backgrounds_Background_Image_Generator_14_0.png" />
</div>
</div>
</div>
<div class="section" id="Line-Follower">
<h2>Line Follower</h2>
<div class="nbinput docutils container">
<div class="prompt highlight-none notranslate"><div class="highlight"><pre><span></span>[146]:
</pre></div>
</div>
<div class="input_area highlight-ipython3 notranslate"><div class="highlight"><pre>
<span></span>filename = &#39;_line_follower_track.png&#39;

img = Image.new(mode, size, &#39;lightgrey&#39;)
draw = ImageDraw.Draw(img)

x, y =  img.size
#Size of Bounding Box for ellipse
eX, eY = 1000, 400

inset = 400
outerBox =  (inset, y/2 - eY/2, inset + eX/2, y/2 + eY/2)
exitBox1 = (inset - 20 + eX/2, y/2 + -100, 4000 + eX/2, y/2 + 50 )
exitBox2 = (inset - 18 + eX/2, y/2 + -100, 4000 + eX/2, y/2 + 100 )

draw.ellipse(outerBox, outline =&quot;black&quot;, width=20)
draw.rectangle((inset + eX/2 - 21, y/2 - 22, inset + eX/2 + 20, y/2), fill=&#39;lightgrey&#39;)

# Arc: bounding box, start angle, end angle
draw.arc(exitBox1, start = 170, end = 180, width=20, fill =&quot;black&quot;)
draw.arc(exitBox2, start = 180, end = 190, width=20, fill =&quot;black&quot;)
draw.arc((inset - 18 + eX/2, y/2 + -100, inset - 18 + eX/2 + 200, y/2 + 100 ),
         start = 180, end = 270, width=20, fill =&quot;red&quot;)
# This needs fixing properly / relatively; maybe even some sums!
draw.rectangle((1700 - 20, y/2 - 200, 1700 + 20, y/2 + 200), fill =&quot;yellow&quot;)
draw.rectangle((inset + eX/2, y/2 - 22, 1900, y/2), fill =&quot;black&quot;)
draw.rectangle((1900 - 20, y/2 - 200, 1900 + 20, y/2 + 200), fill =&quot;red&quot;)

#draw.rectangle([(800, 300), (1000, 900)], fill=&#39;gainsboro&#39;)
img.save(filename)
I(filename)
</pre></div>
</div>
</div>
<div class="nboutput nblast docutils container">
<div class="prompt highlight-none notranslate"><div class="highlight"><pre><span></span>[146]:
</pre></div>
</div>
<div class="output_area docutils container">
<img alt="../../_images/content_backgrounds_Background_Image_Generator_16_0.png" src="../../_images/content_backgrounds_Background_Image_Generator_16_0.png" />
</div>
</div>
<div class="nbinput docutils container">
<div class="prompt highlight-none notranslate"><div class="highlight"><pre><span></span>[159]:
</pre></div>
</div>
<div class="input_area highlight-ipython3 notranslate"><div class="highlight"><pre>
<span></span>%pip install noisify
from noisify.recipes import human_error, machine_error
combined_noise = machine_error(20) + human_error(15)
[i for i in combined_noise(img)][0]
</pre></div>
</div>
</div>
<div class="nboutput docutils container">
<div class="prompt empty docutils container">
</div>
<div class="output_area docutils container">
<div class="highlight"><pre>
Requirement already satisfied: noisify in /srv/conda/envs/notebook/lib/python3.7/site-packages (1.0)
Note: you may need to restart the kernel to use updated packages.
</pre></div></div>
</div>
<div class="nboutput nblast docutils container">
<div class="prompt highlight-none notranslate"><div class="highlight"><pre><span></span>[159]:
</pre></div>
</div>
<div class="output_area docutils container">
<img alt="../../_images/content_backgrounds_Background_Image_Generator_17_1.png" src="../../_images/content_backgrounds_Background_Image_Generator_17_1.png" />
</div>
</div>
<div class="nbinput docutils container">
<div class="prompt highlight-none notranslate"><div class="highlight"><pre><span></span>[171]:
</pre></div>
</div>
<div class="input_area highlight-ipython3 notranslate"><div class="highlight"><pre>
<span></span>from PIL import ImageFilter
tmp = img
for i in range(10):
    tmp = tmp.filter(ImageFilter.BLUR) # BLUR, SMOOTH

tmp

</pre></div>
</div>
</div>
<div class="nboutput nblast docutils container">
<div class="prompt highlight-none notranslate"><div class="highlight"><pre><span></span>[171]:
</pre></div>
</div>
<div class="output_area docutils container">
<img alt="../../_images/content_backgrounds_Background_Image_Generator_18_0.png" src="../../_images/content_backgrounds_Background_Image_Generator_18_0.png" />
</div>
</div>
<div class="nbinput docutils container">
<div class="prompt highlight-none notranslate"><div class="highlight"><pre><span></span>[179]:
</pre></div>
</div>
<div class="input_area highlight-ipython3 notranslate"><div class="highlight"><pre>
<span></span>#https://stackoverflow.com/a/59991417/454773
import numpy as np
def add_salt_and_pepper(image, amount):

    output = np.copy(np.array(image))

    # add salt
    nb_salt = np.ceil(amount * output.size * 0.5)
    coords = [np.random.randint(0, i - 1, int(nb_salt)) for i in output.shape]
    output[coords] = 1

    # add pepper
    nb_pepper = np.ceil(amount* output.size * 0.5)
    coords = [np.random.randint(0, i - 1, int(nb_pepper)) for i in output.shape]
    output[coords] = 0

    return Image.fromarray(output)

add_salt_and_pepper(img,0.01)
</pre></div>
</div>
</div>
<div class="nboutput docutils container">
<div class="prompt empty docutils container">
</div>
<div class="output_area stderr docutils container">
<div class="highlight"><pre>
/srv/conda/envs/notebook/lib/python3.7/site-packages/ipykernel_launcher.py:10: FutureWarning: Using a non-tuple sequence for multidimensional indexing is deprecated; use `arr[tuple(seq)]` instead of `arr[seq]`. In the future this will be interpreted as an array index, `arr[np.array(seq)]`, which will result either in an error or a different result.
  # Remove the CWD from sys.path while we load stuff.
/srv/conda/envs/notebook/lib/python3.7/site-packages/ipykernel_launcher.py:15: FutureWarning: Using a non-tuple sequence for multidimensional indexing is deprecated; use `arr[tuple(seq)]` instead of `arr[seq]`. In the future this will be interpreted as an array index, `arr[np.array(seq)]`, which will result either in an error or a different result.
  from ipykernel import kernelapp as app
</pre></div></div>
</div>
<div class="nboutput nblast docutils container">
<div class="prompt highlight-none notranslate"><div class="highlight"><pre><span></span>[179]:
</pre></div>
</div>
<div class="output_area docutils container">
<img alt="../../_images/content_backgrounds_Background_Image_Generator_19_1.png" src="../../_images/content_backgrounds_Background_Image_Generator_19_1.png" />
</div>
</div>
<div class="nbinput docutils container">
<div class="prompt highlight-none notranslate"><div class="highlight"><pre><span></span>[242]:
</pre></div>
</div>
<div class="input_area highlight-ipython3 notranslate"><div class="highlight"><pre>
<span></span>add_salt_and_pepper(img,0.1).filter(ImageFilter.GaussianBlur(7))
</pre></div>
</div>
</div>
<div class="nboutput docutils container">
<div class="prompt empty docutils container">
</div>
<div class="output_area stderr docutils container">
<div class="highlight"><pre>
/srv/conda/envs/notebook/lib/python3.7/site-packages/ipykernel_launcher.py:10: FutureWarning: Using a non-tuple sequence for multidimensional indexing is deprecated; use `arr[tuple(seq)]` instead of `arr[seq]`. In the future this will be interpreted as an array index, `arr[np.array(seq)]`, which will result either in an error or a different result.
  # Remove the CWD from sys.path while we load stuff.
/srv/conda/envs/notebook/lib/python3.7/site-packages/ipykernel_launcher.py:15: FutureWarning: Using a non-tuple sequence for multidimensional indexing is deprecated; use `arr[tuple(seq)]` instead of `arr[seq]`. In the future this will be interpreted as an array index, `arr[np.array(seq)]`, which will result either in an error or a different result.
  from ipykernel import kernelapp as app
</pre></div></div>
</div>
<div class="nboutput nblast docutils container">
<div class="prompt highlight-none notranslate"><div class="highlight"><pre><span></span>[242]:
</pre></div>
</div>
<div class="output_area docutils container">
<img alt="../../_images/content_backgrounds_Background_Image_Generator_20_1.png" src="../../_images/content_backgrounds_Background_Image_Generator_20_1.png" />
</div>
</div>
<div class="nbinput docutils container">
<div class="prompt highlight-none notranslate"><div class="highlight"><pre><span></span>[240]:
</pre></div>
</div>
<div class="input_area highlight-ipython3 notranslate"><div class="highlight"><pre>
<span></span># Cropped image
border = 10
start_x = inset+50
im1 = img.crop((start_x + eX/2 - border, y/2 - border, start_x + eX/2 + border, y/2+border))
resize = (300, 300)
im1 = im1.resize(resize)
im1
</pre></div>
</div>
</div>
<div class="nboutput nblast docutils container">
<div class="prompt highlight-none notranslate"><div class="highlight"><pre><span></span>[240]:
</pre></div>
</div>
<div class="output_area docutils container">
<img alt="../../_images/content_backgrounds_Background_Image_Generator_21_0.png" src="../../_images/content_backgrounds_Background_Image_Generator_21_0.png" />
</div>
</div>
<div class="nbinput docutils container">
<div class="prompt highlight-none notranslate"><div class="highlight"><pre><span></span>[194]:
</pre></div>
</div>
<div class="input_area highlight-ipython3 notranslate"><div class="highlight"><pre>
<span></span>img.filter(ImageFilter.MedianFilter)
</pre></div>
</div>
</div>
<div class="nboutput nblast docutils container">
<div class="prompt highlight-none notranslate"><div class="highlight"><pre><span></span>[194]:
</pre></div>
</div>
<div class="output_area docutils container">
<img alt="../../_images/content_backgrounds_Background_Image_Generator_22_0.png" src="../../_images/content_backgrounds_Background_Image_Generator_22_0.png" />
</div>
</div>
<div class="nbinput docutils container">
<div class="prompt highlight-none notranslate"><div class="highlight"><pre><span></span>[234]:
</pre></div>
</div>
<div class="input_area highlight-ipython3 notranslate"><div class="highlight"><pre>

<span></span>from tqdm.auto import trange
output = np.copy(np.array(img))
for i in trange(np.array(img).shape[0]):
    if np.random.random() &lt; 0.1:
        for j in range(np.array(img).shape[1]):
            if np.random.random() &lt; 0.1:
                for k in range(np.array(img).shape[2]):
                    output[i][j][k] = max(min(output[i][j][k]+np.random.randint(100)-50, 255), 0)
Image.fromarray(output)
</pre></div>
</div>
</div>
<div class="nboutput docutils container">
<div class="prompt empty docutils container">
</div>
<div class="output_area docutils container">
<script type="application/vnd.jupyter.widget-view+json">{"model_id": "17bfbafae647480892e45199d64fb67b", "version_major": 2, "version_minor": 0}</script></div>
</div>
<div class="nboutput docutils container">
<div class="prompt empty docutils container">
</div>
<div class="output_area docutils container">
<div class="highlight"><pre>

</pre></div></div>
</div>
<div class="nboutput nblast docutils container">
<div class="prompt highlight-none notranslate"><div class="highlight"><pre><span></span>[234]:
</pre></div>
</div>
<div class="output_area docutils container">
<img alt="../../_images/content_backgrounds_Background_Image_Generator_23_2.png" src="../../_images/content_backgrounds_Background_Image_Generator_23_2.png" />
</div>
</div>
</div>
<div class="section" id="Sensor-Diameter-Test">
<h2>Sensor Diameter Test</h2>
<div class="nbinput docutils container">
<div class="prompt highlight-none notranslate"><div class="highlight"><pre><span></span>[249]:
</pre></div>
</div>
<div class="input_area highlight-ipython3 notranslate"><div class="highlight"><pre>
<span></span>filename = &#39;_sensor_diameter_test.png&#39;

img = Image.new(mode, size, color)
draw = ImageDraw.Draw(img)

_band_thickness = 1
_band_length = size[0]

_band_gap = 100

_band_x0 = 0
_band_y0 = 200

# In grey:
for i in range(4):
    _x = _band_x0
    _y = _band_y0 + i*_band_gap
    draw.rectangle([(_x, _y),
                    (_x + _band_length, _y + i * _band_thickness)], fill=&#39;black&#39;)

# In red:

_band_y0 = _y + 2 * _band_gap

for i in range(4):
    _x = _band_x0
    _y = _band_y0 + i*_band_gap
    draw.rectangle([(_x, _y),
                    (_x + _band_length, _y + i * _band_thickness)], fill=&#39;red&#39;)


img.save(filename)
I(filename)
</pre></div>
</div>
</div>
<div class="nboutput nblast docutils container">
<div class="prompt highlight-none notranslate"><div class="highlight"><pre><span></span>[249]:
</pre></div>
</div>
<div class="output_area docutils container">
<img alt="../../_images/content_backgrounds_Background_Image_Generator_25_0.png" src="../../_images/content_backgrounds_Background_Image_Generator_25_0.png" />
</div>
</div>
</div>
<div class="section" id="Tones">
<h2>Tones</h2>
<p>Example tones for use as various audio cues.</p>
<div class="nbinput nblast docutils container">
<div class="prompt highlight-none notranslate"><div class="highlight"><pre><span></span>[ ]:
</pre></div>
</div>
<div class="input_area highlight-ipython3 notranslate"><div class="highlight"><pre>
<span></span>from IPython.display import Javascript
</pre></div>
</div>
</div>
<div class="nbinput nblast docutils container">
<div class="prompt highlight-none notranslate"><div class="highlight"><pre><span></span>[ ]:
</pre></div>
</div>
<div class="input_area highlight-ipython3 notranslate"><div class="highlight"><pre>
<span></span>#via ??

## See also:
# https://marcgg.com/blog/2016/11/01/javascript-audio/
# https://css-tricks.com/introduction-web-audio-api/

tone=&#39;&#39;&#39;
var context = new AudioContext()
var o = null
var g = null
document.addEventListener(&#39;DOMContentLoaded&#39;, function() {
    $(&quot;.js_play_sound&quot;).on(&quot;click&quot;, function(e) {
        e.preventDefault()
        var $target = $(e.target)
        eval($target.data(&quot;source&quot;))
    })
    $(&quot;.js_stop_sound&quot;).on(&quot;click&quot;, function(e) {
        e.preventDefault()
        o.stop()
    })
}, false)

function example1() {
    o = context.createOscillator()
    o.type = &quot;sine&quot;
    o.connect(context.destination)
    o.start()
}

function example2() {
    o = context.createOscillator()
    g = context.createGain()
    o.connect(g)
    g.connect(context.destination)
    o.start(0)
}

function example2Stop(decreaseTime) {
    g.gain.exponentialRampToValueAtTime(0.00001, context.currentTime + decreaseTime)
}

function example3(type, x) {
    o = context.createOscillator()
    g = context.createGain()
    o.connect(g)
    o.type = type
    g.connect(context.destination)
    o.start(0)
    g.gain.exponentialRampToValueAtTime(0.00001, context.currentTime + x)
}

function example4(frequency, type) {
    o = context.createOscillator()
    g = context.createGain()
    o.type = type
    o.connect(g)
    o.frequency.value = frequency
    g.connect(context.destination)
    o.start(0)
    g.gain.exponentialRampToValueAtTime(0.00001, context.currentTime + 1)
}
&#39;&#39;&#39;
</pre></div>
</div>
</div>
<div class="nbinput nblast docutils container">
<div class="prompt highlight-none notranslate"><div class="highlight"><pre><span></span>[ ]:
</pre></div>
</div>
<div class="input_area highlight-ipython3 notranslate"><div class="highlight"><pre>
<span></span># Bright success?
Javascript(tone+&quot;example3(&#39;square&#39;, 1.5)&quot;)
</pre></div>
</div>
</div>
<div class="nbinput nblast docutils container">
<div class="prompt highlight-none notranslate"><div class="highlight"><pre><span></span>[ ]:
</pre></div>
</div>
<div class="input_area highlight-ipython3 notranslate"><div class="highlight"><pre>
<span></span># Deeper fail?
Javascript(tone+&quot;example4(&#39;50&#39;, &#39;sawtooth&#39;)&quot;)
</pre></div>
</div>
</div>
</div>
<div class="section" id="ChatBot-Scripts">
<h2>ChatBot Scripts</h2>
<div class="nbinput nblast docutils container">
<div class="prompt highlight-none notranslate"><div class="highlight"><pre><span></span>[310]:
</pre></div>
</div>
<div class="input_area highlight-ipython3 notranslate"><div class="highlight"><pre>
<span></span>from chatterbot import ChatBot
chatbot = ChatBot(&quot;Test&quot;)
from IPython.display import clear_output
clear_output()
</pre></div>
</div>
</div>
<div class="nbinput docutils container">
<div class="prompt highlight-none notranslate"><div class="highlight"><pre><span></span>[261]:
</pre></div>
</div>
<div class="input_area highlight-ipython3 notranslate"><div class="highlight"><pre>
<span></span>print(chatbot.get_response(&quot;Good morning!&quot;))

</pre></div>
</div>
</div>
<div class="nboutput nblast docutils container">
<div class="prompt empty docutils container">
</div>
<div class="output_area docutils container">
<div class="highlight"><pre>
Good morning!
</pre></div></div>
</div>
<div class="nbinput docutils container">
<div class="prompt highlight-none notranslate"><div class="highlight"><pre><span></span>[262]:
</pre></div>
</div>
<div class="input_area highlight-ipython3 notranslate"><div class="highlight"><pre>
<span></span>print(chatbot.get_response(&quot;How are you today?&quot;))
</pre></div>
</div>
</div>
<div class="nboutput nblast docutils container">
<div class="prompt empty docutils container">
</div>
<div class="output_area docutils container">
<div class="highlight"><pre>
Good morning!
</pre></div></div>
</div>
<div class="nbinput nblast docutils container">
<div class="prompt highlight-none notranslate"><div class="highlight"><pre><span></span>[279]:
</pre></div>
</div>
<div class="input_area highlight-ipython3 notranslate"><div class="highlight"><pre>
<span></span>from chatterbot.trainers import ListTrainer
</pre></div>
</div>
</div>
<div class="nbinput nblast docutils container">
<div class="prompt highlight-none notranslate"><div class="highlight"><pre><span></span>[290]:
</pre></div>
</div>
<div class="input_area highlight-ipython3 notranslate"><div class="highlight"><pre>
<span></span>ChatBot?
</pre></div>
</div>
</div>
<div class="nbinput docutils container">
<div class="prompt highlight-none notranslate"><div class="highlight"><pre><span></span>[307]:
</pre></div>
</div>
<div class="input_area highlight-ipython3 notranslate"><div class="highlight"><pre>
<span></span>chatbot = ChatBot(&#39;as&#39;);
</pre></div>
</div>
</div>
<div class="nboutput nblast docutils container">
<div class="prompt empty docutils container">
</div>
<div class="output_area stderr docutils container">
<div class="highlight"><pre>
UsageError: Line magic function `%capture` not found (But cell magic `%%capture` exists, did you mean that instead?).
</pre></div></div>
</div>
<div class="nbinput docutils container">
<div class="prompt highlight-none notranslate"><div class="highlight"><pre><span></span>[298]:
</pre></div>
</div>
<div class="input_area highlight-ipython3 notranslate"><div class="highlight"><pre>
<span></span>dir(logging)
</pre></div>
</div>
</div>
<div class="nboutput nblast docutils container">
<div class="prompt highlight-none notranslate"><div class="highlight"><pre><span></span>[298]:
</pre></div>
</div>
<div class="output_area docutils container">
<div class="highlight"><pre>
[&#39;BASIC_FORMAT&#39;,
 &#39;BufferingFormatter&#39;,
 &#39;CRITICAL&#39;,
 &#39;DEBUG&#39;,
 &#39;ERROR&#39;,
 &#39;FATAL&#39;,
 &#39;FileHandler&#39;,
 &#39;Filter&#39;,
 &#39;Filterer&#39;,
 &#39;Formatter&#39;,
 &#39;Handler&#39;,
 &#39;INFO&#39;,
 &#39;LogRecord&#39;,
 &#39;Logger&#39;,
 &#39;LoggerAdapter&#39;,
 &#39;Manager&#39;,
 &#39;NOTSET&#39;,
 &#39;NullHandler&#39;,
 &#39;PercentStyle&#39;,
 &#39;PlaceHolder&#39;,
 &#39;RootLogger&#39;,
 &#39;StrFormatStyle&#39;,
 &#39;StreamHandler&#39;,
 &#39;StringTemplateStyle&#39;,
 &#39;Template&#39;,
 &#39;WARN&#39;,
 &#39;WARNING&#39;,
 &#39;_STYLES&#39;,
 &#39;_StderrHandler&#39;,
 &#39;__all__&#39;,
 &#39;__author__&#39;,
 &#39;__builtins__&#39;,
 &#39;__cached__&#39;,
 &#39;__date__&#39;,
 &#39;__doc__&#39;,
 &#39;__file__&#39;,
 &#39;__loader__&#39;,
 &#39;__name__&#39;,
 &#39;__package__&#39;,
 &#39;__path__&#39;,
 &#39;__spec__&#39;,
 &#39;__status__&#39;,
 &#39;__version__&#39;,
 &#39;_acquireLock&#39;,
 &#39;_addHandlerRef&#39;,
 &#39;_after_at_fork_child_reinit_locks&#39;,
 &#39;_at_fork_reinit_lock_weakset&#39;,
 &#39;_checkLevel&#39;,
 &#39;_defaultFormatter&#39;,
 &#39;_defaultLastResort&#39;,
 &#39;_handlerList&#39;,
 &#39;_handlers&#39;,
 &#39;_levelToName&#39;,
 &#39;_lock&#39;,
 &#39;_logRecordFactory&#39;,
 &#39;_loggerClass&#39;,
 &#39;_nameToLevel&#39;,
 &#39;_register_at_fork_reinit_lock&#39;,
 &#39;_releaseLock&#39;,
 &#39;_removeHandlerRef&#39;,
 &#39;_showwarning&#39;,
 &#39;_srcfile&#39;,
 &#39;_startTime&#39;,
 &#39;_warnings_showwarning&#39;,
 &#39;addLevelName&#39;,
 &#39;atexit&#39;,
 &#39;basicConfig&#39;,
 &#39;captureWarnings&#39;,
 &#39;collections&#39;,
 &#39;critical&#39;,
 &#39;currentframe&#39;,
 &#39;debug&#39;,
 &#39;disable&#39;,
 &#39;error&#39;,
 &#39;exception&#39;,
 &#39;fatal&#39;,
 &#39;getLevelName&#39;,
 &#39;getLogRecordFactory&#39;,
 &#39;getLogger&#39;,
 &#39;getLoggerClass&#39;,
 &#39;handlers&#39;,
 &#39;info&#39;,
 &#39;io&#39;,
 &#39;lastResort&#39;,
 &#39;log&#39;,
 &#39;logMultiprocessing&#39;,
 &#39;logProcesses&#39;,
 &#39;logThreads&#39;,
 &#39;makeLogRecord&#39;,
 &#39;os&#39;,
 &#39;raiseExceptions&#39;,
 &#39;root&#39;,
 &#39;setLogRecordFactory&#39;,
 &#39;setLoggerClass&#39;,
 &#39;shutdown&#39;,
 &#39;sys&#39;,
 &#39;threading&#39;,
 &#39;time&#39;,
 &#39;traceback&#39;,
 &#39;warn&#39;,
 &#39;warning&#39;,
 &#39;warnings&#39;,
 &#39;weakref&#39;]
</pre></div></div>
</div>
<div class="nbinput docutils container">
<div class="prompt highlight-none notranslate"><div class="highlight"><pre><span></span>[278]:
</pre></div>
</div>
<div class="input_area highlight-ipython3 notranslate"><div class="highlight"><pre>
<span></span>trainer = ListTrainer(chatbot)

trainer.train([
    &quot;Hi, can I help you?&quot;,
    &quot;Sure, I&#39;d like to book a flight to Iceland.&quot;,
    &quot;Your flight has been booked.&quot;
]
)

trainer.train([
    &quot;Hello&quot;,
    &quot;What time is it in France&quot;,
    &quot;Quarter past twelve.&quot;
    &quot;Is that the time?&quot;
])

trainer.train([
    &quot;Morning&quot;,
    &quot;What time is it in Germany&quot;,
    &quot;get a flight.&quot;
])

# Get a response to the input text &#39;I would like to book a flight.&#39;
response = chatbot.get_response(&#39;Can I get a flight to Iceland?&#39;)

print(response)
</pre></div>
</div>
</div>
<div class="nboutput docutils container">
<div class="prompt empty docutils container">
</div>
<div class="output_area docutils container">
<div class="highlight"><pre>
List Trainer: [####################] 100%
List Trainer: [####################] 100%
List Trainer: [####################] 100%
</pre></div></div>
</div>
<div class="nboutput docutils container">
<div class="prompt empty docutils container">
</div>
<div class="output_area stderr docutils container">
<div class="highlight"><pre>
[nltk_data] Downloading package averaged_perceptron_tagger to
[nltk_data]     /home/jovyan/nltk_data...
[nltk_data]   Package averaged_perceptron_tagger is already up-to-
[nltk_data]       date!
[nltk_data] Downloading package punkt to /home/jovyan/nltk_data...
[nltk_data]   Package punkt is already up-to-date!
[nltk_data] Downloading package stopwords to /home/jovyan/nltk_data...
[nltk_data]   Package stopwords is already up-to-date!
</pre></div></div>
</div>
<div class="nboutput nblast docutils container">
<div class="prompt empty docutils container">
</div>
<div class="output_area docutils container">
<div class="highlight"><pre>

get a flight.
</pre></div></div>
</div>
<div class="nbinput nblast docutils container">
<div class="prompt highlight-none notranslate"><div class="highlight"><pre><span></span>[ ]:
</pre></div>
</div>
<div class="input_area highlight-ipython3 notranslate"><div class="highlight"><pre>
<span></span>
</pre></div>
</div>
</div>
</div>
</div>


            <div class="clearer"></div>
          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>